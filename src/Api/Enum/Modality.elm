-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.Enum.Modality exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| 

  - Ct - 
  - Cta - 
  - Mr - 
  - Mra - 

-}
type Modality
    = Ct
    | Cta
    | Mr
    | Mra
decoder : Decoder Modality
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CT" ->
                        Decode.succeed Ct

                    "CTA" ->
                        Decode.succeed Cta

                    "MR" ->
                        Decode.succeed Mr

                    "MRA" ->
                        Decode.succeed Mra

                    _ ->
                        Decode.fail ("Invalid Modality type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Modality -> String
toString enum =
    case enum of
        Ct ->
                "CT"


        Cta ->
                "CTA"


        Mr ->
                "MR"


        Mra ->
                "MRA"
