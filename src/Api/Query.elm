-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Query exposing (RoiSearchOptionalArguments, SeriesWithIDOptionalArguments, roiSearch, selection, series, seriesWithID)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


{-| -}
series : SelectionSet decodesTo Api.Object.Series -> Field (Maybe (List (Maybe decodesTo))) RootQuery
series object =
    Object.selectionField "series" [] object (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias SeriesWithIDOptionalArguments =
    { id : OptionalArgument Api.Scalar.Id }


{-|

  - id -

-}
seriesWithID : (SeriesWithIDOptionalArguments -> SeriesWithIDOptionalArguments) -> SelectionSet decodesTo Api.Object.Series -> Field (Maybe decodesTo) RootQuery
seriesWithID fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (\(Api.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "seriesWithID" optionalArgs object (identity >> Decode.nullable)


type alias RoiSearchOptionalArguments =
    { volumeId : OptionalArgument Api.Scalar.Id, x : OptionalArgument Int, y : OptionalArgument Int, width : OptionalArgument Int, height : OptionalArgument Int, slice : OptionalArgument Int }


{-|

  - volumeId -
  - x -
  - y -
  - width -
  - height -
  - slice -

-}
roiSearch : (RoiSearchOptionalArguments -> RoiSearchOptionalArguments) -> SelectionSet decodesTo Api.Object.SearchResult -> Field (Maybe decodesTo) RootQuery
roiSearch fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { volumeId = Absent, x = Absent, y = Absent, width = Absent, height = Absent, slice = Absent }

        optionalArgs =
            [ Argument.optional "volumeId" filledInOptionals.volumeId (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.optional "x" filledInOptionals.x Encode.int, Argument.optional "y" filledInOptionals.y Encode.int, Argument.optional "width" filledInOptionals.width Encode.int, Argument.optional "height" filledInOptionals.height Encode.int, Argument.optional "slice" filledInOptionals.slice Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "roiSearch" optionalArgs object (identity >> Decode.nullable)
